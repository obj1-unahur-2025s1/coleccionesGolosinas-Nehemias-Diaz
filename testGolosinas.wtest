import golosinas.*

describe "Grupo de test sobre las golosinas" {
  const bb1 = new Bombon()
  const alf1 = new Alfajor()
  const crml1 = new Caramelo()
  const chpt1 = new Chupetin()
  const obl1 = new Oblea()
  const chocolatin1 = new Chocolatin(pesoInicial = 40)
  const chocolatin2 = new Chocolatin(pesoInicial = 100)
  const chocolatin3 = new Chocolatin(pesoInicial = 3)
  const chocolatin4 = new Chocolatin(pesoInicial = 30)
  const pastilla1 = new PastillaTuttiFrutti(esLibreDeGluten = true)
  const pastilla2 = new PastillaTuttiFrutti(esLibreDeGluten = false)
  const golBan = new GolosinaBaniada(golosinaDentro = bb1)
  const golBan1 = new GolosinaBaniada(golosinaDentro = alf1)
  const bañada = new GolosinaBaniada(golosinaDentro = pastilla1)
  
  test "Bombon cumple propiedades iniciales" {
    assert.equals(5, bb1.precio())
    assert.equals(frutilla, bb1.sabor())
    assert.equals(15, bb1.peso())
    assert.that(bb1.esLibreDeGluten())
  }
  
  test "Bombon pierde peso correctamente con 2 mordiscos" {
    // Primer mordisco: (15 * 0.8) - 1 = 11
    bb1.mordisco()
    assert.equals(11, bb1.peso())
    // Segundo mordisco: (11 * 0.8) - 1 = 7.8
    bb1.mordisco()
    assert.equals(7.8, bb1.peso())
  }
  
  test "Alfajor cumple propiedades iniciales" {
    assert.equals(12, alf1.precio())
    assert.equals(chocolate, alf1.sabor())
    assert.equals(300, alf1.peso())
    assert.notThat(alf1.esLibreDeGluten())
  }
  
  test "Alfajor pierde peso correctamente con 2 mordiscos" {
    // Primer mordisco: 300 * 0.8 = 240
    alf1.mordisco()
    assert.equals(240, alf1.peso())
    // Segundo mordisco: 240 * 0.8 = 192
    alf1.mordisco()
    assert.equals(192, alf1.peso())
  }
  
  test "Caramelo cumple propiedades iniciales" {
    assert.equals(1, crml1.precio())
    assert.equals(frutilla, crml1.sabor())
    assert.equals(5, crml1.peso())
    assert.that(crml1.esLibreDeGluten())
  }
  
  test "Caramelo pierde peso correctamente con 2 mordiscos" {
    // Primer mordisco: 5 - 1 = 4
    crml1.mordisco()
    assert.equals(4, crml1.peso())
    // Segundo mordisco: 4 - 1 = 3
    crml1.mordisco()
    assert.equals(3, crml1.peso())
  }
  
  test "Chupetin cumple propiedades iniciales" {
    assert.equals(2, chpt1.precio())
    assert.equals(naranja, chpt1.sabor())
    assert.equals(7, chpt1.peso())
    assert.that(chpt1.esLibreDeGluten())
  }
  
  test "Chupetin pierde peso correctamente con 2 mordiscos" {
    // Primer mordisco: 7 * 0.9 = 6.3
    chpt1.mordisco()
    assert.equals(6.3, chpt1.peso())
    // Segundo mordisco: 6.3 * 0.9 = 5.67
    chpt1.mordisco()
    assert.equals(5.67, chpt1.peso())
  }
  
  test "Oblea cumple propiedades iniciales" {
    assert.equals(5, obl1.precio())
    assert.equals(vainilla, obl1.sabor())
    assert.equals(250, obl1.peso())
    assert.that(!obl1.esLibreDeGluten())
  }
  
  test "Oblea pierde peso correctamente con mordiscos" {
    // Primer mordisco (peso > 70): 250 / 2 = 125
    obl1.mordisco()
    assert.equals(125, obl1.peso())
    // Segundo mordisco (peso > 70): 125 / 2 = 62.5
    obl1.mordisco()
    assert.equals(62.5, obl1.peso())
    // Tercer mordisco (peso <= 70): 62.5 - (62.5 * 0.25) = 46.875
    obl1.mordisco()
    assert.equals(46.875, obl1.peso())
  }
  
  test "chocolatin1 40g cumple propiedades iniciales" {
    assert.equals(20, chocolatin1.precio()) // 40 * 0.5
    assert.equals(chocolate, chocolatin1.sabor())
    assert.equals(40, chocolatin1.peso())
    assert.notThat(chocolatin1.esLibreDeGluten())
  }
  
  test "chocolatin2 100g cumple propiedades iniciales" {
    assert.equals(50, chocolatin2.precio()) // 100 * 0.5
    assert.equals(100, chocolatin2.peso())
    assert.notThat(chocolatin2.esLibreDeGluten())
    assert.equals(chocolate, chocolatin2.sabor())
  }
  
  test "chocolatin1 pierde peso correctamente con mordiscos" {
    // Primer mordisco: 40 - 2 = 38
    chocolatin1.mordisco()
    assert.equals(38, chocolatin1.peso())
    // Segundo mordisco: 38 - 2 = 36
    chocolatin1.mordisco()
    assert.equals(36, chocolatin1.peso())
  }
  
  test "pastilla1 tutti-frutti sin gluten cumple propiedades" {
    assert.equals(7, pastilla1.precio())
    assert.equals(5, pastilla1.peso())
    assert.equals(frutilla, pastilla1.sabor())
    assert.that(pastilla1.esLibreDeGluten())
  }
  
  test "pastilla2 tutti-frutti con gluten cumple propiedades" {
    assert.equals(10, pastilla2.precio())
    assert.notThat(pastilla2.esLibreDeGluten())
  }
  
  test "pastilla1 tutti-frutti cambia sabor con mordiscos" {
    // Sabor inicial: frutilla
    assert.equals(frutilla, pastilla1.sabor())
    // Primer mordisco: chocolate
    pastilla1.mordisco()
    assert.equals(chocolate, pastilla1.sabor())
    // Segundo mordisco: naranja
    pastilla1.mordisco()
    assert.equals(naranja, pastilla1.sabor())
    // Tercer mordisco: vuelve a frutilla
    pastilla1.mordisco()
    assert.equals(frutilla, pastilla1.sabor())
  }
  
  test "GolosinaBaniada (base Bombon) cumple propiedades iniciales" {
    assert.equals(15 + 4, golBan.peso()) // Peso base + bañado
    assert.equals(5 + 2, golBan.precio()) // Precio base + 2
    assert.equals(frutilla, golBan.sabor()) // Sabor igual al base
    assert.that(golBan.esLibreDeGluten()) // Gluten igual al base
  }
  
  test "GolosinaBaniada (base Bombon) pierde peso correctamente" {
    // Primer mordisco: Bombón pasa de 15 a 11, bañado de 4 → 2 (total: 13)
    golBan.mordisco()
    assert.equals(11 + 2, golBan.peso())
    // Segundo mordisco: Bombón 11 a 7.8, bañado 2 a 0 (total: 7.8)
    golBan.mordisco()
    assert.equals(7.8 + 0, golBan.peso())
  }
  
  test "Chocolatin no tiene peso negativo" {
    chocolatin3.mordisco() // 3 a 1
    chocolatin3.mordisco() // 1 a -1 a 0 (por .max(0))
    assert.equals(0, chocolatin3.peso())
  }
  
  test "PastillaTuttiFrutti con gluten tiene precio 10" {
    assert.equals(10, pastilla2.precio())
  }
  
  test "Chocolatin mantiene precio inicial tras mordiscos" {
    chocolatin4.mordisco()
    assert.equals(15, chocolatin4.precio()) // 30 * 0.5 (no cambia)
  }
  
  test "GolosinaBaniada (base Alfajor) no es libre de gluten" {
    assert.notThat(golBan1.esLibreDeGluten())
  }
  
  test "GolosinaBaniada solo afecta base tras 2 mordiscos" {
    golBan.mordisco() // Bañado: 4 a 2
    golBan.mordisco() // Bañado: 2 a 0
    golBan.mordisco() // Solo base: Bombón de 7.8 a 5.24
    assert.equals(5.24 + 0, golBan.peso())
  }
  
  test "GolosinaBaniada con Pastilla cambia sabor y pierde peso bañado" {
    bañada.mordisco()
    assert.equals(chocolate, bañada.sabor())
    assert.equals((5 + 4) - 2, bañada.peso())
    // pastilla peso fijo 5 + bañado restante 2
  }
}